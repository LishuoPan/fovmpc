//
// Created by lishuo on 9/21/24.
//

#ifndef MPC_CBF_PIECEWISEBEZIERMPCCBFQPGENERATOR_H
#define MPC_CBF_PIECEWISEBEZIERMPCCBFQPGENERATOR_H

#include <mpc/optimization/PiecewiseBezierMPCQPGenerator.h>
#include <mpc_cbf/optimization/PiecewiseBezierMPCCBFQPOperations.h>

namespace mpc_cbf {
    template <typename T, unsigned int DIM>
    class PiecewiseBezierMPCCBFQPGenerator {
    public:
        using PiecewiseBezierMPCQPGenerator = mpc::PiecewiseBezierMPCQPGenerator<T, DIM>;
        using PiecewiseBezierMPCCBFQPOperations = mpc_cbf::PiecewiseBezierMPCCBFQPOperations<T, DIM>;
        using PiecewiseBezierMPCQPOperations = mpc::PiecewiseBezierMPCQPOperations<T, DIM>;
        using LinearConstraint = typename PiecewiseBezierMPCCBFQPOperations::LinearConstraint;
        using State = typename PiecewiseBezierMPCCBFQPOperations::State;
        using Vector = typename PiecewiseBezierMPCCBFQPOperations::Vector;
        void addPiecewise(std::unique_ptr<PiecewiseBezierMPCCBFQPOperations> &&piecewise_mpc_cbf_operations_ptr);
        // return a reference to the problem instance generated by this generator
        qpcpp::Problem<T>& problem();
        // return a pointer to the PiecewiseBezierMPCQPGenerator API
        std::shared_ptr<PiecewiseBezierMPCQPGenerator> piecewise_mpc_qp_generator_ptr();

        void addSafetyCBFConstraint(const State& current_state, const Vector& other_pos, T slack_value=0);
        void addFovLBConstraint(const State& current_state, const Vector& other_pos, T slack_value=0);
        void addFovRBConstraint(const State& current_state, const Vector& other_pos, T slack_value=0);

        void addPredSafetyCBFConstraints(const std::vector<State>& pred_states, const Vector& other_pos, const std::vector<T>& slack_values);
        void addPredFovLBConstraints(const std::vector<State>& pred_states, const Vector& other_pos, const std::vector<T>& slack_values);
        void addPredFovRBConstraints(const std::vector<State>& pred_states, const Vector& other_pos, const std::vector<T>& slack_values);

    private:
        std::shared_ptr<PiecewiseBezierMPCQPGenerator> piecewise_mpc_qp_generator_ptr_ = std::make_shared<PiecewiseBezierMPCQPGenerator>();
        std::unique_ptr<PiecewiseBezierMPCCBFQPOperations> piecewise_mpc_cbf_operations_ptr_;

    };

} // mpc_cbf

#endif //MPC_CBF_PIECEWISEBEZIERMPCCBFQPGENERATOR_H
