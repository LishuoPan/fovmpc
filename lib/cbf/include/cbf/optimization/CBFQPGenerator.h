//
// Created by lishuo on 8/31/24.
//

#ifndef MPC_CBFQPGENERATOR_H
#define MPC_CBFQPGENERATOR_H

#include <cbf/optimization/CBFQPOperations.h>
#include <math/Helpers.h>
#include <qpcpp/Problem.h>

namespace cbf {
    template <typename T, unsigned int DIM>
    class CBFQPGenerator {
    public:
        using CBFQPOperations = cbf::CBFQPOperations<T, DIM>;
        using CostAddition = typename cbf::CBFQPOperations<T, DIM>::CostAddition;
        using LinearConstraint = typename cbf::CBFQPOperations<T, DIM>::LinearConstraint;
        using DecisionVariableBounds = typename cbf::CBFQPOperations<T, DIM>::DecisionVariableBounds;
        using VectorDIM = math::VectorDIM<T, DIM>;
        using Vector = math::Vector<T>;


        void addCBFOperations(std::unique_ptr<CBFQPOperations> cbf_operations_ptr);
        // return a reference to the problem instance generated by this generator
        qpcpp::Problem<T>& problem();

        void addDesiredControlCost(const VectorDIM& desired_u);
        void addSafetyConstraint(const Vector& state, const Vector& target_state);
        void addLeftBorderConstraint(const Vector& state, const Vector& target_state);
        void addRightBorderConstraint(const Vector& state, const Vector& target_state);
        void addRangeConstraint(const Vector& state, const Vector& target_state);
        void addControlBoundConstraint(const VectorDIM &u_min, const VectorDIM &u_max);

        VectorDIM generatorCBFControlInput() const;

    private:
        void addCostAdditionForControlInput(const CostAddition& cost_addition);
        void addLinearConstraintForControlInput(const LinearConstraint& linear_constraint);
        void addDecisionVariableBoundsForControlInput(const DecisionVariableBounds& decision_variable_bounds);
        std::unique_ptr<CBFQPOperations> cbf_operations_ptr_;

        // quadratic program generated by this generator
        qpcpp::Problem<T> problem_;
        // all variables for the piecewise curve
        std::vector<qpcpp::Variable<T>*> variables_;
    };

} // cbf

#endif //MPC_CBFQPGENERATOR_H
